//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/BasicNetworkDemo/ControllOwnPlayer/PlayerControls1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls1 : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls1"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3b05e348-dc89-4eff-afb2-4b4d7f231aae"",
            ""actions"": [
                {
                    ""name"": ""Smile"",
                    ""type"": ""Value"",
                    ""id"": ""27d6c523-e3af-4437-b01a-7b59bec78c12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeanLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5384e209-7f05-401a-8512-8a0cbd970f45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanRight"",
                    ""type"": ""Button"",
                    ""id"": ""8aa4a6c6-f7fd-4d66-a938-a44f1158e69f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanForward"",
                    ""type"": ""Button"",
                    ""id"": ""82f7188d-2344-4137-8e9e-01dae54b957c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeanBackward"",
                    ""type"": ""Button"",
                    ""id"": ""60798333-a513-437c-bc12-d44766892343"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""085975d5-4495-4e2e-88cb-16cbeacbbef3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Smile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5483133a-9e0b-4f25-80d0-13836e045cd5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e7f27ba-ef36-41c3-ac43-04dc9cf8beff"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52610541-69ec-487f-bdfd-21aba72ce5a4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c45327ee-5f06-4cdc-a88b-a2a30a6deeca"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeanBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Smile = m_Player.FindAction("Smile", throwIfNotFound: true);
        m_Player_LeanLeft = m_Player.FindAction("LeanLeft", throwIfNotFound: true);
        m_Player_LeanRight = m_Player.FindAction("LeanRight", throwIfNotFound: true);
        m_Player_LeanForward = m_Player.FindAction("LeanForward", throwIfNotFound: true);
        m_Player_LeanBackward = m_Player.FindAction("LeanBackward", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Smile;
    private readonly InputAction m_Player_LeanLeft;
    private readonly InputAction m_Player_LeanRight;
    private readonly InputAction m_Player_LeanForward;
    private readonly InputAction m_Player_LeanBackward;
    public struct PlayerActions
    {
        private @PlayerControls1 m_Wrapper;
        public PlayerActions(@PlayerControls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Smile => m_Wrapper.m_Player_Smile;
        public InputAction @LeanLeft => m_Wrapper.m_Player_LeanLeft;
        public InputAction @LeanRight => m_Wrapper.m_Player_LeanRight;
        public InputAction @LeanForward => m_Wrapper.m_Player_LeanForward;
        public InputAction @LeanBackward => m_Wrapper.m_Player_LeanBackward;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Smile.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSmile;
                @Smile.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSmile;
                @Smile.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSmile;
                @LeanLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanLeft;
                @LeanLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanLeft;
                @LeanLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanLeft;
                @LeanRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanRight;
                @LeanRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanRight;
                @LeanRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanRight;
                @LeanForward.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanForward;
                @LeanForward.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanForward;
                @LeanForward.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanForward;
                @LeanBackward.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanBackward;
                @LeanBackward.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanBackward;
                @LeanBackward.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeanBackward;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Smile.started += instance.OnSmile;
                @Smile.performed += instance.OnSmile;
                @Smile.canceled += instance.OnSmile;
                @LeanLeft.started += instance.OnLeanLeft;
                @LeanLeft.performed += instance.OnLeanLeft;
                @LeanLeft.canceled += instance.OnLeanLeft;
                @LeanRight.started += instance.OnLeanRight;
                @LeanRight.performed += instance.OnLeanRight;
                @LeanRight.canceled += instance.OnLeanRight;
                @LeanForward.started += instance.OnLeanForward;
                @LeanForward.performed += instance.OnLeanForward;
                @LeanForward.canceled += instance.OnLeanForward;
                @LeanBackward.started += instance.OnLeanBackward;
                @LeanBackward.performed += instance.OnLeanBackward;
                @LeanBackward.canceled += instance.OnLeanBackward;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnSmile(InputAction.CallbackContext context);
        void OnLeanLeft(InputAction.CallbackContext context);
        void OnLeanRight(InputAction.CallbackContext context);
        void OnLeanForward(InputAction.CallbackContext context);
        void OnLeanBackward(InputAction.CallbackContext context);
    }
}
